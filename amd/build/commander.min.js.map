{"version":3,"file":"commander.min.js","sources":["../src/commander.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n// Initialize the module with imports.\n// This file is part of Moodle - http://moodle.org/\n// Moodle is free software: you can redistribute it and/or modify it under the terms of the GNU GPL v3 or later.\n\n// Initialize the module with imports.\nimport notification from 'core/notification';\nimport Log from 'core/log';\n\n/**\n * Keyboard key codes mapped to their respective event.key values.\n */\nconst KEYS = {\n    ESCAPE: 'Escape',\n    ENTER: 'Enter',\n    ARROW_UP: 'ArrowUp',\n    ARROW_DOWN: 'ArrowDown',\n};\n\n/**\n * Options we can set from AMD.\n */\nconst commanderAppOptions = {\n    courseid: '',\n    keys: [],\n};\n\n/**\n * Set options based on provided parameters.\n * @param {object} options\n */\nfunction setOptions(options) {\n    Object.keys(commanderAppOptions).forEach((key) => {\n        if (options.hasOwnProperty(key)) {\n            commanderAppOptions[key] = options[key];\n        }\n    });\n}\n\n/**\n * The main commander application.\n */\nconst commanderApp = {\n    /**\n     * Modal DOM element instance.\n     */\n    mainModal: null,\n\n    /**\n     * Modal background layer DOM element.\n     */\n    mainModalBackLayer: null,\n\n    /**\n     * Input field element.\n     */\n    mainModalCommand: null,\n\n    /**\n     * Stores all list item elements.\n     */\n    liSet: null,\n\n    /**\n     * Flag to check if the modal is open.\n     */\n    isShow: false,\n\n    /**\n     * Stores the response JSON.\n     */\n    json: null,\n\n    /**\n     * Render the UI.\n     */\n    render() {\n        Log.debug('Rendering UI');\n\n        // Create the modal HTML using a template literal.\n        const modalHtml = `\n            <style>\n                :root {\n                    --modal-bg-color: #fff;\n                    --modal-text-color: #000;\n                    --modal-border-color: #ccc;\n                    --highlight-bg-color: #f4bd21;\n                }\n\n                @media (prefers-color-scheme: dark) {\n                    :root {\n                        --modal-bg-color: #2c2c2c;\n                        --modal-text-color: #f0f0f0;\n                        --modal-border-color: #555;\n                        --highlight-bg-color: #f4bd21;\n                    }\n                }\n\n                .local_commander {\n                    position: fixed;\n                    top: 50%;\n                    left: 50%;\n                    transform: translate(-50%, -50%);\n                    background-color: var(--modal-bg-color);\n                    color: var(--modal-text-color);\n                    border: 1px solid var(--modal-border-color);\n                    z-index: 1001;\n                    overflow: hidden;\n                    display: none;\n                    width: 80%;\n                    max-width: 600px;\n                    box-shadow: 0 2px 10px rgba(0,0,0,0.5);\n                }\n\n                .local_commander-header {\n                    padding: 10px;\n                    border-bottom: 1px solid var(--modal-border-color);\n                }\n\n                .local_commander-body {\n                    padding: 10px;\n                }\n\n                .local_commander-body div {\n                    max-height: 300px;\n                    overflow-y: auto;\n                }\n\n                .local_commander ul {\n                    list-style: none;\n                    padding: 0;\n                    margin: 0;\n                }\n\n                .local_commander li {\n                    padding: 5px;\n                    cursor: pointer;\n                }\n\n                .local_commander li.active {\n                    background-color: var(--highlight-bg-color);\n                }\n\n                .local_commander a {\n                    color: inherit;\n                    text-decoration: none;\n                }\n\n                .local_commander input[type=\"text\"] {\n                    width: 100%;\n                    padding: 10px;\n                    border: none;\n                    border-top: 1px solid var(--modal-border-color);\n                    font-size: 16px;\n                    box-sizing: border-box;\n                    background-color: var(--modal-bg-color);\n                    color: var(--modal-text-color);\n                }\n\n                .highlight {\n                    background-color: var(--highlight-bg-color);\n                }\n\n                .local_commander-backdrop {\n                    position: fixed;\n                    top: 0;\n                    left: 0;\n                    width: 100%;\n                    height: 100%;\n                    background-color: rgba(0, 0, 0, 0.5);\n                    z-index: 1000;\n                    display: none;\n                }\n            </style>\n            <div id=\"local_commander_modal\" class=\"local_commander\" role=\"dialog\" aria-modal=\"true\"\n             aria-labelledby=\"local_commander_header\">\n                <div class=\"local_commander-header\">\n                    <h2 id=\"local_commander_header\">${M.util.get_string('js:header', 'local_commander')}</h2>\n                </div>\n                <div class=\"local_commander-body\">\n                    <div><ul></ul></div>\n                </div>\n                <input type=\"text\" name=\"local_commander_command\" id=\"local_commander_command\"\n                 placeholder=\"${M.util.get_string('js:command_placeholder', 'local_commander')}\"\n                  aria-label=\"${M.util.get_string('js:command_placeholder', 'local_commander')}\">\n            </div>\n            <div id=\"local_commander_back_layer\" class=\"local_commander-backdrop\"></div>\n        `;\n\n        // Append the modal to the body.\n        document.body.insertAdjacentHTML('beforeend', modalHtml);\n\n        // Set references to the modal elements.\n        this.mainModal = document.getElementById('local_commander_modal');\n        this.mainModalBackLayer = document.getElementById('local_commander_back_layer');\n        this.mainModalCommand = document.getElementById('local_commander_command');\n\n        // Add event listeners.\n        this.addEventListeners();\n\n        // Load the menu content once.\n        if (!this.json) {\n            this.loadMenu();\n        }\n    },\n\n    /**\n     * Start the commander.\n     */\n    start() {\n        window.addEventListener('keydown', (e) => {\n            Log.debug(`Key pressed: ${e.key}`);\n            Log.debug(`Trigger keys: ${commanderAppOptions.keys}`);\n            Log.debug(`Commander is visible: ${this.isShow}`);\n\n            // Check for arrow keys when the modal is open.\n            if (this.isShow) {\n                switch (e.key) {\n                    case KEYS.ESCAPE:\n                        this.hide();\n                        break;\n                    case KEYS.ENTER:\n                        e.preventDefault();\n                        this.goToCommand();\n                        break;\n                    case KEYS.ARROW_UP:\n                        e.preventDefault();\n                        this.navigateMenu('up');\n                        break;\n                    case KEYS.ARROW_DOWN:\n                        e.preventDefault();\n                        this.navigateMenu('down');\n                        break;\n                    default:\n                        break;\n                }\n                return;\n            }\n\n            // Check if the pressed key is one of the trigger keys.\n            if (commanderAppOptions.keys.includes(e.key)) {\n                Log.debug('Commander keyboard key triggered');\n\n                // Validate that we're not in an editable area.\n                const target = e.target;\n                const tagName = target.tagName.toUpperCase();\n                if (['INPUT', 'SELECT', 'TEXTAREA'].includes(tagName) || target.isContentEditable) {\n                    Log.debug('Ignoring keypress in editable element');\n                    return;\n                }\n\n                e.preventDefault();\n\n                // Render the modal if it hasn't been created yet.\n                if (!this.mainModal) {\n                    this.render();\n                }\n\n                Log.debug('Opening commander');\n\n                if (this.isShow) {\n                    this.hide();\n                } else {\n                    this.show();\n                }\n            }\n        });\n    },\n\n    /**\n     * Add event listeners to modal elements.\n     */\n    addEventListeners() {\n        // Close the modal when clicking the backdrop.\n        this.mainModalBackLayer.addEventListener('click', () => {\n            this.hide();\n        });\n\n        // Optimize search with a debounced input event.\n        const debouncedSearch = this.debounce(() => {\n            this.search(this.mainModalCommand.value);\n        }, 200);\n\n        this.mainModalCommand.addEventListener('input', debouncedSearch);\n    },\n\n    /**\n     * Debounce function to limit the rate of function execution.\n     * @param {function} func\n     * @param {number} wait\n     * @returns {function}\n     */\n    debounce(func, wait) {\n        let timeout;\n        return function(...args) {\n            clearTimeout(timeout);\n            timeout = setTimeout(() => func.apply(this, args), wait);\n        };\n    },\n\n    /**\n     * Navigate through the menu items.\n     * @param {string} direction - 'up' or 'down'\n     */\n    navigateMenu(direction) {\n        Log.debug(`Navigating ${direction}`);\n        const activeItem = this.mainModal.querySelector('ul li.active');\n        let newItem = null;\n\n        if (activeItem) {\n            activeItem.classList.remove('active');\n            newItem = direction === 'up' ? activeItem.previousElementSibling : activeItem.nextElementSibling;\n\n            while (newItem && newItem.style.display === 'none') {\n                newItem = direction === 'up' ? newItem.previousElementSibling : newItem.nextElementSibling;\n            }\n        }\n\n        if (newItem) {\n            newItem.classList.add('active');\n        } else if (activeItem) {\n            activeItem.classList.add('active');\n        }\n\n        this.scrollToActiveItem();\n    },\n\n    /**\n     * Scroll to the active menu item.\n     */\n    scrollToActiveItem() {\n        const container = this.mainModal.querySelector('.local_commander-body div');\n        const activeItem = this.mainModal.querySelector('li.active');\n\n        if (activeItem && container) {\n            container.scrollTop = activeItem.offsetTop - container.offsetTop - 10;\n        }\n    },\n\n    /**\n     * Execute the selected command.\n     */\n    goToCommand() {\n        Log.debug('Executing command');\n        const activeLink = this.mainModal.querySelector('ul li.active a');\n        if (activeLink) {\n            const link = activeLink.getAttribute('href');\n            if (link !== '#') {\n                window.location.href = link;\n            }\n        }\n    },\n\n    /**\n     * Load the menu from the server.\n     */\n    async loadMenu() {\n        try {\n            const response = await fetch(`${M.cfg.wwwroot}/local/commander/ajax.php?courseid=${commanderAppOptions.courseid}`, {\n                method: 'GET',\n                credentials: 'same-origin',\n            });\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            this.json = await response.json();\n            Log.debug(this.json);\n            this.setMenu();\n        } catch (error) {\n            Log.error(error);\n            notification.alert(M.util.get_string('js:error_parsing', 'local_commander'));\n        }\n    },\n\n    /**\n     * Search the menu for the input word.\n     * @param {string} query\n     */\n    search(query) {\n        // Normalize the query.\n        const searchTerm = query.trim().toUpperCase();\n\n        // Get all list items.\n        const listItems = Array.from(this.liSet);\n\n        // Remove previous highlights and hide non-matching items.\n        listItems.forEach((li) => {\n            this.removeHighlight(li);\n            li.style.display = '';\n            li.classList.remove('active');\n        });\n\n        if (searchTerm === '') {\n            return;\n        }\n\n        let firstMatch = null;\n\n        listItems.forEach((li) => {\n            const textContent = li.textContent.toUpperCase();\n            if (textContent.includes(searchTerm)) {\n                this.highlightWord(li, searchTerm);\n                if (!firstMatch) {\n                    firstMatch = li;\n                }\n            } else {\n                li.style.display = 'none';\n            }\n        });\n\n        if (firstMatch) {\n            firstMatch.classList.add('active');\n            this.scrollToActiveItem();\n        }\n    },\n\n    /**\n     * Highlight words in the menu items.\n     * @param {HTMLElement} element\n     * @param {string} word\n     */\n    highlightWord(element, word) {\n        const regex = new RegExp(`(${word.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');\n        element.innerHTML = element.innerHTML.replace(regex, '<span class=\"highlight\">$1</span>');\n    },\n\n    /**\n     * Remove highlights from an element.\n     * @param {HTMLElement} element\n     */\n    removeHighlight(element) {\n        element.innerHTML = element.textContent;\n    },\n\n    /**\n     * Build the command menu.\n     */\n    setMenu() {\n        Log.debug('Setting up menu');\n\n        let html = '';\n\n        if (commanderAppOptions.courseid > 0 && this.json.courseadmin) {\n            Log.debug('Including course administration menu');\n            html += this.renderMenuItems(this.json.courseadmin, '');\n        }\n\n        if (this.json.admin) {\n            html += this.renderMenuItems(this.json.admin, '');\n        }\n\n        const ulElement = this.mainModal.querySelector('.local_commander-body ul');\n        ulElement.innerHTML = html;\n\n        this.liSet = this.mainModal.querySelectorAll('.local_commander-body ul li');\n    },\n\n    /**\n     * Render menu items recursively.\n     * @param {object} item\n     * @param {string} parentName\n     * @returns {string}\n     */\n    renderMenuItems(item, parentName) {\n        if (!item.name) {\n            return '';\n        }\n\n        let html = '';\n\n        const fullName = parentName ? `${parentName} → ${item.name}` : item.name;\n        html += `<li><a href=\"${item.link}\">${fullName}</a></li>`;\n\n        if (item.haschildren && item.children) {\n            item.children.forEach((child) => {\n                html += this.renderMenuItems(child, fullName);\n            });\n        }\n\n        return html;\n    },\n\n    /**\n     * Show the modal.\n     */\n    show() {\n        this.mainModal.style.display = 'block';\n        this.mainModalBackLayer.style.display = 'block';\n        this.isShow = true;\n\n        // Focus on the search field.\n        this.mainModalCommand.focus();\n    },\n\n    /**\n     * Hide the modal.\n     */\n    hide() {\n        this.mainModal.style.display = 'none';\n        this.mainModalBackLayer.style.display = 'none';\n        this.isShow = false;\n\n        // Clear the search input.\n        this.mainModalCommand.value = '';\n\n        // Reset the menu.\n        this.search('');\n    },\n};\n\n/**\n * Initialize the module.\n * @param {object} params\n */\nfunction init(params) {\n    // Set the options.\n    setOptions(params);\n\n    // Wait for the DOM to be fully loaded.\n    Log.debug('DOM fully loaded - initializing commanderApp');\n    Log.debug(commanderAppOptions);\n    commanderApp.start();\n}\n\nexport default {\n    init,\n};\n"],"names":["KEYS","commanderAppOptions","courseid","keys","commanderApp","mainModal","mainModalBackLayer","mainModalCommand","liSet","isShow","json","render","debug","modalHtml","M","util","get_string","document","body","insertAdjacentHTML","getElementById","addEventListeners","this","loadMenu","start","window","addEventListener","e","key","hide","preventDefault","goToCommand","navigateMenu","includes","target","tagName","toUpperCase","isContentEditable","show","debouncedSearch","debounce","search","value","func","wait","timeout","args","clearTimeout","setTimeout","apply","direction","activeItem","querySelector","newItem","classList","remove","previousElementSibling","nextElementSibling","style","display","add","scrollToActiveItem","container","scrollTop","offsetTop","activeLink","link","getAttribute","location","href","response","fetch","cfg","wwwroot","method","credentials","ok","Error","setMenu","error","alert","query","searchTerm","trim","listItems","Array","from","forEach","li","removeHighlight","firstMatch","textContent","highlightWord","element","word","regex","RegExp","replace","innerHTML","html","courseadmin","renderMenuItems","admin","querySelectorAll","item","parentName","name","fullName","haschildren","children","child","focus","init","params","options","Object","hasOwnProperty"],"mappings":"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"}